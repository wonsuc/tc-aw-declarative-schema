{
    "$schema": "http://json-schema.org/draft-06/schema#",
    "description": "This is the schema the declarative drag and drop (in JSON format) must adhere to. The Apollo audit check validates all dragAndDrop JSON files against this schema. For explanation of the keywords of this schema, please visit https://ajv.js.org/keywords.html",
    "definitions": {
        "dragActionsDef": {
            "type": "object",
            "properties": {
                "dragStart": {
                    "type": "string",
                    "description": "Name of the action to be executed for drag start event."
                },
                "dragEnd": {
                    "type": "string",
                    "description": "Name of the action to be executed for drag end event."
                }
            },
            "required": [
                "dragStart"
            ]
        },
        "dropActionsDef": {
            "type": "object",
            "properties": {
                "dragEnter": {
                    "type": "string",
                    "description": "Name of the action to be executed for drag enter event."
                },
                "dragLeave": {
                    "type": "string",
                    "description": "Name of the action to be executed for drag leave event."
                },
                "dragOver": {
                    "type": "string",
                    "description": "Name of the action to be executed for drag over event."
                },
                "drop": {
                    "type": "string",
                    "description": "Name of the action to be executed for drop event."
                }
            },
            "required": [
                "dragOver"
            ]
        },
        "dragHandlerDef": {
            "additionalProperties": false,
            "type": "object",
            "description": "The drag handler definition corresponding to views.",
            "properties": {
                "activeWhen": {
                    "$ref": "#/definitions/conditionOrBoolDef",
                    "description": "The name of the declarative condition which will determine when this drag handler is active for the specified views."
                },
                "views": {
                    "type": "array",
                    "description": "Array of views to set drop handlers on.",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "dragActions": {
                    "$ref": "#/definitions/dragActionsDef",
                    "description": "Actions for drag operation."
                }
            },
            "required": [
                "views",
                "dragActions"
            ]
        },
        "dropHandlerDef": {
            "additionalProperties": false,
            "type": "object",
            "description": "The drop handler definition corresponding to views.",
            "properties": {
                "activeWhen": {
                    "$ref": "#/definitions/conditionOrBoolDef",
                    "description": "The name of the declarative condition which will determine when this drag handler is active for the specified views."
                },
                "views": {
                    "type": "array",
                    "description": "Array of views to set drop handlers on.",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "dropActions": {
                    "$ref": "#/definitions/dropActionsDef",
                    "description": "Actions for drag operation."
                }
            },
            "required": [
                "views",
                "dropActions"
            ]
        },
        "conditionOrBoolDef": {
            "oneOf": [ {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "condition": {
                            "type": [ "string", "boolean" ],
                            "description": "Condition expression that evaluates to : 'true','false',true or false"

                        }
                    }
                },
                {
                    "type": "boolean"
                }
            ]
        },
        "conditionDef": {
            "additionalProperties": false,
            "type": "object",
            "description": "Expressions can be defined as simple strings or object.",
            "properties": {
                "expression": {
                    "$ref": "#/definitions/expressionStringOrObjectDef"
                }
            },
            "required": [
                "expression"
            ]
        },
        "syncActionDef": {
            "additionalProperties": false,
            "type": "object",
            "description": "Action type 'syncFunction' executes an action synchronously.",
            "properties": {
                "actionType": {
                    "type": "string",
                    "const": "syncFunction"
                },
                "method": {
                    "type": "string",
                    "description": "Points to the method name that should be invoked from the js file specified in 'deps'"
                },
                "inputData": {
                    "type": "object",
                    "description": "JSON data for the action input."
                },
                "deps": {
                    "type": "string",
                    "description": "Dependent files needed by the action. For ex. In case of actionType 'JSFunction', you would need to add a deps on some js file path."
                }
            }
        },
        "sourceStringOrObjectDef": {
            "oneOf": [ {
                    "type": "string"
                },
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "$adapt": {
                            "type": "string",
                            "description": "Indicates that the resulting source should be adapted before evaluating the query"
                        }
                    }
                }
            ]
        },
        "expressionStringOrObjectDef": {
            "oneOf": [ {
                    "type": "object",
                    "description": "Expression can be defined as object with the support of below operators.",
                    "additionalProperties": false,
                    "properties": {
                        "$source": {
                            "$ref": "#/definitions/sourceStringOrObjectDef",
                            "description": "Indicates the reference on data context node to be used as starting point for evaluation. For ex. 'ctx.selected'"
                        },
                        "$query": {
                            "type": "object",
                            "description": "Defines the query to be executed on the source"
                        },
                        "$and": {
                            "type": "array",
                            "description": "Indicates logical 'AND' of each query result"
                        },
                        "$or": {
                            "type": "array",
                            "description": "Indicates logical 'OR' of each query result"
                        },
                        "$all": {
                            "type": "array",
                            "description": "Indicates logical 'ALL' of each query result"
                        },
                        "$eventSource": {
                            "type": "object",
                            "description": "This operator lets user specify the viewId or viewName or 'self' to write a condition to enable the events to be filtered out based on whether or not it is triggered from the same viewModel."
                        },
                        "$not": {
                            "type": "object",
                            "description": "Indicates logical 'NOT' of a query result"
                        }
                    }
                },
                {
                    "type": "string",
                    "description": "Expression as simple string: 'expression': 'ctx.mselected && ctx.mselected.length > 1'"
                }
            ]
        }
    },
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "schemaVersion": {
            "description": "Version of the schema it complies with",
            "type": [ "string", "integer" ]
        },
        "dragHandlers": {
            "type": "object",
            "description": "Defines the drag handlers",
            "additionalProperties": false,
            "patternProperties": {
                "^[a-zA-Z_]+[a-zA-Z0-9_]*$": {
                    "$ref": "#/definitions/dragHandlerDef"
                }
            }
        },
        "dropHandlers": {
            "type": "object",
            "description": "Defines the drop handlers",
            "additionalProperties": false,
            "patternProperties": {
                "^[a-zA-Z_]+[a-zA-Z0-9_]*$": {
                    "$ref": "#/definitions/dropHandlerDef"
                }
            }
        },
        "actions": {
            "type": "object",
            "description": "In the drag and drop configuration, actions are declaratively defined. Actions in drag and drop configuration can only be of actionType 'syncFunction'.",
            "additionalProperties": false,
            "patternProperties": {
                "^[a-zA-Z_]+[a-zA-Z0-9_]*$": {
                    "$ref": "#/definitions/syncActionDef"
                }
            }
        },
        "conditions": {
            "type": "object",
            "description": "Conditions provide live logic evaluation. They can evaluate to true/false. They can be used in active-when clauses. The data value can be live evaluated by condition. The conditions can refer to view model state and can update view model state. They can leverage Boolean condition expressions like '&&', '||', '==', '!='",
            "patternProperties": {
                "^[a-zA-Z_]+[a-zA-Z0-9_]*$": {
                    "$ref": "#/definitions/conditionDef"
                }
            }
        }
    },
    "required": [
        "actions"
    ]
}
